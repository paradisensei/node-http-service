{
  "swagger": "2.0",
  "info": {
    "description": "Simple node http service",
    "version": "1.0.0",
    "title": "Http service"
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "persons",
      "description": "Api for persons management"
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/persons": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Get all persons",
        "operationId": "getPersons",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "firstName",
            "description": "Person first name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "minage",
            "description": "Person min age (inclusive)",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "maxage",
            "description": "Person max age (inclusive)",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of all persons",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Add a new person",
        "operationId": "addPerson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Person object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly added person",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/persons/{personId}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Get person by ID",
        "operationId": "getPersonById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Person found by ID",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Updates an existing person",
        "operationId": "updatePerson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Person attributes to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated person",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes a person",
        "operationId": "deletePerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "ID of person to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted"
          },
          "400": {
            "description": "Validation or Resource not found error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Person": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "age": {
          "type": "integer"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  }
}